apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
// for annotation processing
apply plugin: 'kotlin-kapt'

// third party kotlin lint tool
apply plugin: "org.jlleitschuh.gradle.ktlint"

apply plugin: 'jacoco-android'

android {
    signingConfigs {
        release {
            storeFile file('redfruitkey.jks')
            keyAlias = 'RedFruitKey'
            storePassword '123456'
            keyPassword 'qwertzu'
        }
    }
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.example.redfruit"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            buildConfigField 'String', "ClientId", REDFRUIT
            testCoverageEnabled true
        }
        release {
            buildConfigField 'String', "ClientId", REDFRUIT

            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

android {
    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }
}

dependencies {
    def dagger_version = "2.25.2"
    def ktx_version = "1.1.0"
    def exo_version = "2.10.8"
    def markwon_version = "4.2.0"
    def groupie_version = "2.7.1"
    def moshi_version = '1.9.2'
    def retrofit_version = "2.6.2"
    def coroutine_version = "1.3.2"
    def test_version = "1.2.0"
    def espresso_version = "3.2.0"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    // migration to androidx
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.activity:activity-ktx:$ktx_version-rc02"
    implementation "androidx.fragment:fragment-ktx:$ktx_version"
    implementation "androidx.preference:preference-ktx:$ktx_version"
    // json deserializer
    implementation("com.squareup.moshi:moshi-kotlin:$moshi_version")
    kapt("com.squareup.moshi:moshi-kotlin-codegen:$moshi_version")
    // for api calls
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
    implementation("com.squareup.okhttp3:okhttp:4.2.2")
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    // for fetching images
    implementation("io.coil-kt:coil:0.8.0")
    // pinch to zoom etc. for images
    implementation 'com.github.MikeOrtiz:TouchImageView:2.3.0'
    // url preview
    implementation 'com.github.SoundSonic1:urlembeddedview:249fc957d'
    // custom item animators for RecyclerView
    implementation 'jp.wasabeef:recyclerview-animators:3.0.0'
    // for advanced video playback
    implementation "com.google.android.exoplayer:exoplayer-core:$exo_version"
    implementation "com.google.android.exoplayer:exoplayer-ui:$exo_version"
    implementation "com.google.android.exoplayer:exoplayer-dash:$exo_version"
    implementation 'com.github.PierfrancescoSoffritti:AndroidYouTubePlayer:10.0.5'
    // for dependency injection
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    // for markdown support in TextView
    implementation "io.noties.markwon:core:$markwon_version"
    // for complex RecyclerView layouts
    implementation "com.xwray:groupie:$groupie_version"
    implementation "com.xwray:groupie-kotlin-android-extensions:$groupie_version"
    implementation "com.xwray:groupie-databinding:$groupie_version"
    // testing
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.5.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.5.2")
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_version"
    androidTestImplementation "androidx.test:runner:$test_version"
    androidTestImplementation "androidx.test:rules:$test_version"
    androidTestImplementation "androidx.test:core-ktx:$test_version"
    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
}

ktlint {
    android.set(true)

    reporters {
        customReporters {
            register("html") {
                fileExtension = "html"
                dependency = "me.cassiano:ktlint-html-reporter:0.2.3"
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoAndroidUnitTestReport {
    // ignore ui components for now
    excludes += ['**/*Fragment*.*',
                 '**/*Activity*.*',
                 '**/*App.*',
                 '**/*ViewPager*.*',
                 '**/*ViewHolder*.*',
                 '**/*VMFactory*.*',
                 '**/*ListAdapter*.*',
                 '**/*PagerAdapter*.*',
                 '**/*BindingAdapters*.*',
                 '**/*Constants*.*',
                 '**/*ColorDrawable*.*',
                 '**/*Module*.*']
}
